name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    - name: Test app runs
      run: |
        python -c "from main import app; print('✅ App imports successfully')"
        echo "✅ FastAPI app is working"

  python-security:
    name: Python Security Tools
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit pip-audit
    
    - name: Install project dependencies
      run: pip install -r requirements.txt
    
    - name: Run Safety (check for known vulnerabilities)
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Safety check completed with findings"
    
    - name: Run pip-audit (alternative dependency check)
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || echo "Pip-audit completed with findings"
    
    - name: Run Bandit (code security scan)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || echo "Bandit scan completed with findings"
    
    - name: Upload Python Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          bandit-report.json

  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    # Snyk Open Source (dependency scanning)
    - name: Run Snyk Open Source Test
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --json --json-file-output=snyk-dependencies.json
        command: test
      continue-on-error: true
    
    # Snyk Code (SAST scanning)
    - name: Run Snyk Code Test
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --json --json-file-output=snyk-code.json
        command: code test
      continue-on-error: true
    
    # Snyk Infrastructure as Code (if you have Docker/K8s files)
    - name: Run Snyk IaC Test
      uses: snyk/actions/iac@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --json --json-file-output=snyk-iac.json
      continue-on-error: true
    
    # Upload all Snyk reports
    - name: Upload Snyk Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-security-reports
        path: |
          snyk-dependencies.json
          snyk-code.json
          snyk-iac.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t fastapi-app:latest .
    
    # Snyk Container scanning
    - name: Run Snyk Container Test
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: fastapi-app:latest
        args: --json --json-file-output=snyk-container.json
      continue-on-error: true
    
    # Alternative: Trivy container scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'fastapi-app:latest'
        format: 'json'
        output: 'trivy-container.json'
      continue-on-error: true
    
    - name: Upload Container Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-reports
        path: |
          snyk-container.json
          trivy-container.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [test, python-security, snyk-security, container-security]
    if: always()
    
    steps:
    - name: Create Security Summary
      run: |
        echo "## 🛡️ Comprehensive Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test results
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ **Application Test**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Application Test**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Python security tools (always continue)
        echo "✅ **Python Security Tools**: COMPLETED (check artifacts for details)" >> $GITHUB_STEP_SUMMARY
        
        # Snyk results (always continue)
        echo "✅ **Snyk Security Scans**: COMPLETED (check artifacts for details)" >> $GITHUB_STEP_SUMMARY
        
        # Container security (if applicable)
        if [[ "${{ needs.container-security.result }}" == "skipped" ]]; then
          echo "⚪ **Container Security**: SKIPPED (no Dockerfile found)" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Container Security**: COMPLETED (check artifacts for details)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Security Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- **python-security-reports** - Safety, pip-audit, Bandit results" >> $GITHUB_STEP_SUMMARY
        echo "- **snyk-security-reports** - Snyk Open Source, Code, IaC results" >> $GITHUB_STEP_SUMMARY
        echo "- **container-security-reports** - Snyk Container, Trivy results (if applicable)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Tools Used:" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety** - Python dependency vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **pip-audit** - Python package vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit** - Python code security issues" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk Open Source** - Dependency vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk Code** - Static application security testing" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk IaC** - Infrastructure as Code security" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk Container** - Container image vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Trivy** - Alternative container scanning" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **All security scans completed! Check artifacts for detailed results.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Note**: All scans continue on error to generate complete artifacts for analysis."